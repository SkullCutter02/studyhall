// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator prismaClassGenerator {
  provider   = "prisma-class-generator"
  dryRun     = false
  useSwagger = false
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  email     String   @unique
  roles     Role[]

  info      Info?
  halls     HallsUsers[]
  questions Question[]
  answers   Answer[]

  @@map("users")
}

model Hall {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  inviteId  String?   @unique

  users     HallsUsers[]
  questions Question[]

  @@map("halls")
}

model Question {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  title      String
  body       String
  whiteboard String?
  answered   Boolean  @default(false)

  author   User?   @relation(fields: [authorId], references: [id], onDelete: SetNull)
  authorId String?
  hall     Hall    @relation(fields: [hallId], references: [id], onDelete: Cascade)
  hallId   String

  answers Answer[]

  @@map("questions")
}

model Answer {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  body      String

  author     User?    @relation(fields: [authorId], references: [id], onDelete: SetNull)
  authorId   String?
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String

  reference   Answer?  @relation("AnswerReferences", fields: [referenceId], references: [id], onDelete: SetNull)
  referenceId String?
  references  Answer[] @relation("AnswerReferences")

  @@map("answers")
}

model HallsUsers {
  role     HallRole
  nickname String?
  joinedAt DateTime @default(now())

  hall   Hall   @relation(fields: [hallId], references: [id], onDelete: Cascade)
  hallId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@id([hallId, userId])
  @@map("halls_users")
}

model Info {
  id   String @id
  user User   @relation(fields: [id], references: [id], onDelete: Cascade)
  hash String

  currentHashedRefreshToken String?

  @@map("infos")
}

enum Role {
  admin
  user
}

enum HallRole {
  teacher
  student
}
